package main;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class GuestKorisnik {

	ClientHandler ch;

	public GuestKorisnik(ClientHandler client) {
		ch = client;
	}

	private String ime;
	private String prezime;
	private String JMBG;
	private String email;
	private int brojKarata;

	public String getIme() {
		return ime;
	}

	public void setIme(String ime) {
		this.ime = ime;
	}

	public String getPrezime() {
		return prezime;
	}

	public void setPrezime(String prezime) {
		this.prezime = prezime;
	}

	public String getJMBG() {
		return JMBG;
	}

	public void setJMBG(String jMBG) {
		JMBG = jMBG;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public int getBrojKarata() {
		return brojKarata;
	}

	public void setBrojKarata(int brojKarata) {
		this.brojKarata = brojKarata;
	}

	@Override
	public String toString() {
		return "Ime: " + ime + "\nPrezime: " + prezime + "\nJMBG: " + JMBG + "\nEmail: " + email + "\nBroj karata: "
				+ brojKarata;
	}

	private boolean validirajJMBG(String JMBG) {
		if (JMBG == null || JMBG.isEmpty() || JMBG.length() != 13) {
			return false;
		}
		for (int i = 0; i < JMBG.length(); i++) {
			if (!Character.isDigit(JMBG.charAt(i))) {
				return false;
			}
		}
		return true;
	}

	private boolean validirajEmail(String email) {
		if (email == null || email.isEmpty() || !email.contains("@")) {
			return false;
		}
		return true;
	}

	private boolean validirajBrojKarata(String brojKarata) {
		if (brojKarata == null || brojKarata.isEmpty()) {
			return false;
		}
		for (int i = 0; i < brojKarata.length(); i++) {
			if (!Character.isDigit(brojKarata.charAt(i))) {
				return false;
			}
		}
		int karte = Integer.parseInt(brojKarata);
		if (karte < 0 || karte > 4) {
			return false;
		}
		return true;
	}

	private int brojPorucenihKarata(String JMBG) {
		int brojKarata = 0;
		String[] sviKorisnici = null;
		try (FileReader fr = new FileReader("rezervacije.txt"); BufferedReader br = new BufferedReader(fr)) {
			String linijaTeksta = "";
			while (true) {
				String pom = br.readLine();
				if (pom == null) {
					break;
				} else {
					linijaTeksta = linijaTeksta + pom + " ";
				}
			}
			sviKorisnici = linijaTeksta.split("------------------------------");
			for (int i = 0; i < sviKorisnici.length; i++) {
				if (sviKorisnici[i].contains(JMBG)) {
					brojKarata = Integer
							.parseInt(sviKorisnici[i].substring(sviKorisnici[i].indexOf("Broj karata:") + 12).trim());
					break;
				}
			}
		} catch (Exception e) {
			ch.clientOutput.println("Greška prilikom èitanja iz fajla: " + e.getMessage());
		}
		return brojKarata;
	}

	private void azuriranjeFajla(String JMBG, int brojKarata) {
		String[] sviKorisnici = null;
		File fajlZaModifikovanje = new File("rezervacije.txt");
		BufferedReader reader = null;
		FileWriter writer = null;
		try {
			reader = new BufferedReader(new FileReader(fajlZaModifikovanje));
			String linijaTeksta = "";
			while (true) {
				String pom = reader.readLine();
				if (pom == null) {
					break;
				} else {
					linijaTeksta = linijaTeksta + pom + System.lineSeparator();
				}
			}
			sviKorisnici = linijaTeksta.split("------------------------------");
			String izmena = "";
			String temp = "";
			for (int i = 0; i < sviKorisnici.length; i++) {
				if (sviKorisnici[i].contains("JMBG: " + JMBG)) {
					temp = sviKorisnici[i];
					sviKorisnici[i] = sviKorisnici[i].replaceAll(
							"Broj karata: " + brojPorucenihKarata(username, password), "Broj karata: " + brojKarata);
					izmena = sviKorisnici[i];
					break;
				}
			}
			String noviTekst = linijaTeksta.replaceAll(temp, izmena);
			writer = new FileWriter(fajlZaModifikovanje);
			writer.write(noviTekst);
		} catch (Exception e) {
			ch.clientOutput.println("Greška prilikom èitanja iz fajla: " + e.getMessage());
		} finally {
			try {
				reader.close();
				writer.close();
			} catch (Exception e) {
				ch.clientOutput.println("Greška prilikom èitanja iz fajla: " + e.getMessage());
			}
		}
	}

	public void porucivanjeKarti() throws IOException {
		ch.clientOutput.println("Unesite ime:");
		do {
			String unosImena = ch.clientInput.readLine();
			if (unosImena != null && !unosImena.isEmpty()) {
				setIme(unosImena);
				break;
			} else {
				ch.clientOutput.println("Greška prilikom unosa imena. Molimo vas da ponovo unesete ime:");
			}
		} while (true);
		ch.clientOutput.println("Unesite prezime:");
		do {
			String unosPrezimena = ch.clientInput.readLine();
			if (unosPrezimena != null && !unosPrezimena.isEmpty()) {
				setPrezime(unosPrezimena);
				break;
			} else {
				ch.clientOutput.println("Greška prilikom unosa prezimena. Molimo vas da ponovo unesete prezime: ");
			}
		} while (true);
		ch.clientOutput.println("Unesite JMBG:");
		do {
			String unosJMBGa = ch.clientInput.readLine();
			if (validirajJMBG(unosJMBGa) == true) {
				setJMBG(unosJMBGa);
				break;
			} else {
				ch.clientOutput.println("Greška prilikom unosa JMBG-a. Molimo vas da ponovo unesete JMBG: ");
			}
		} while (true);
		ch.clientOutput.println("Unesite email:");
		do {
			String unosEmaila = ch.clientInput.readLine();
			if (validirajEmail(unosEmaila) == true) {
				setEmail(unosEmaila);
				break;
			} else {
				ch.clientOutput.println("Greška prilikom unosa email-a. Molimo vas da ponovo unesete email: ");
			}
		} while (true);
		ch.clientOutput.println("Koliko karata želite da poruèite?");
		do {
			String unosKarata = ch.clientInput.readLine();
			if (validirajBrojKarata(unosKarata)) {
				brojKarata = Integer.parseInt(unosKarata);
				setBrojKarata(brojKarata);
				break;
			} else {
				ch.clientOutput.println(
						"Greška prilikom unosa broja karata. Molimo vas da ponovo unesete broj karata koji želite da poruèite: ");
			}
		} while (true);
		ch.clientOutput.println("Uspešan unos.");
	}
}
